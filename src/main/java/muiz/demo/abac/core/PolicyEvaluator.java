package muiz.demo.abac.core;

import org.neo4j.driver.Driver;
import org.neo4j.driver.Record;
import org.neo4j.driver.Session;
import org.neo4j.driver.exceptions.Neo4jException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpServletRequest;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/**
 * Executes cypher queries generated by the query generator and responds with whether access is allowed or not based on current request.
 */
@Service
public class PolicyEvaluator {
    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyEvaluator.class.getName());

    private final HttpServletRequest request;

    private final Driver driver;

    @Autowired
    public PolicyEvaluator(HttpServletRequest request, Driver driver) {
        this.request = request;
        this.driver = driver;
    }

    public void evaluate() {
        var policiesQueries = new PolicyQueryGenerator(request).getQueries();
        try (Session session = driver.session()) {
            for (var policyQuery : policiesQueries.entrySet()) {
                Record record = session.readTransaction(tx -> tx.run(policyQuery.getValue()).single());
                var results = record.asMap().entrySet().stream().findFirst();
                LOGGER.info(policyQuery.getValue());
                results.ifPresent(stringObjectEntry -> LOGGER.info(String.valueOf((Boolean) stringObjectEntry.getValue())));
            }
        } catch (Neo4jException ex) {
            LOGGER.error(ex.getMessage());
            throw ex;
        }
    }
}
