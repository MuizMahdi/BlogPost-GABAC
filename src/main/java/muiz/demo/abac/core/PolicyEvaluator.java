package muiz.demo.abac.core;

import org.neo4j.driver.Driver;
import org.neo4j.driver.Record;
import org.neo4j.driver.Session;
import org.neo4j.driver.exceptions.Neo4jException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerMapping;

import javax.servlet.http.HttpServletRequest;
import java.util.Map;

/**
 * Executes cypher queries generated by the query generator and responds with whether access is allowed or not for the current request.
 */
@Component
public class PolicyEvaluator {
    private static final Logger LOGGER = LoggerFactory.getLogger(PolicyEvaluator.class.getName());

    private final Driver driver;

    @Autowired
    public PolicyEvaluator(Driver driver) {
        this.driver = driver;
    }

    public boolean isAllowed(HttpServletRequest request) {
        var pathVariables = (Map<String, String>) request.getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);
        String resource = request.getRequestURI().split("/")[1];
        String action = request.getMethod();
        var policiesQueries = new PolicyQueryGenerator(pathVariables).getQueries();
        var policyQuery = policiesQueries.keySet().stream().filter(policyResource ->
            resource.equals(policyResource.getType().toLowerCase()) && action.equals(policyResource.getAction())
        ).findFirst();

        if (policyQuery.isPresent()) {
            String query = policiesQueries.get(policyQuery.get());
            LOGGER.info(query);
            try (Session session = driver.session()) {
                Record record = session.readTransaction(tx -> tx.run(query).single());
                var result = record.asMap().entrySet().stream().findFirst();
                boolean hasMatch = result.isPresent() && (Boolean) result.get().getValue();
                boolean isPermitted = policyQuery.get().isPermitted();
                return hasMatch == isPermitted;
            } catch (Neo4jException ex) {
                LOGGER.error(ex.getMessage());
                throw ex;
            }
        }

        return false;
    }
}
